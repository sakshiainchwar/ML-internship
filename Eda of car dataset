{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " # Importing the Required Libraries and dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt #for visualisation\n",
    "from sklearn.model_selection import train_test_split\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>Engine Fuel Type</th>\n",
       "      <th>Engine HP</th>\n",
       "      <th>Engine Cylinders</th>\n",
       "      <th>Transmission Type</th>\n",
       "      <th>Driven_Wheels</th>\n",
       "      <th>Number of Doors</th>\n",
       "      <th>Market Category</th>\n",
       "      <th>Vehicle Size</th>\n",
       "      <th>Vehicle Style</th>\n",
       "      <th>highway MPG</th>\n",
       "      <th>city mpg</th>\n",
       "      <th>Popularity</th>\n",
       "      <th>MSRP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series M</td>\n",
       "      <td>2011</td>\n",
       "      <td>premium unleaded (required)</td>\n",
       "      <td>335.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Factory Tuner,Luxury,High-Performance</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Coupe</td>\n",
       "      <td>26</td>\n",
       "      <td>19</td>\n",
       "      <td>3916</td>\n",
       "      <td>46135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2011</td>\n",
       "      <td>premium unleaded (required)</td>\n",
       "      <td>300.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Luxury,Performance</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Convertible</td>\n",
       "      <td>28</td>\n",
       "      <td>19</td>\n",
       "      <td>3916</td>\n",
       "      <td>40650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2011</td>\n",
       "      <td>premium unleaded (required)</td>\n",
       "      <td>300.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Luxury,High-Performance</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Coupe</td>\n",
       "      <td>28</td>\n",
       "      <td>20</td>\n",
       "      <td>3916</td>\n",
       "      <td>36350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2011</td>\n",
       "      <td>premium unleaded (required)</td>\n",
       "      <td>230.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Luxury,Performance</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Coupe</td>\n",
       "      <td>28</td>\n",
       "      <td>18</td>\n",
       "      <td>3916</td>\n",
       "      <td>29450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2011</td>\n",
       "      <td>premium unleaded (required)</td>\n",
       "      <td>230.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Luxury</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Convertible</td>\n",
       "      <td>28</td>\n",
       "      <td>18</td>\n",
       "      <td>3916</td>\n",
       "      <td>34500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Make       Model  Year             Engine Fuel Type  Engine HP  \\\n",
       "0  BMW  1 Series M  2011  premium unleaded (required)      335.0   \n",
       "1  BMW    1 Series  2011  premium unleaded (required)      300.0   \n",
       "2  BMW    1 Series  2011  premium unleaded (required)      300.0   \n",
       "3  BMW    1 Series  2011  premium unleaded (required)      230.0   \n",
       "4  BMW    1 Series  2011  premium unleaded (required)      230.0   \n",
       "\n",
       "   Engine Cylinders Transmission Type     Driven_Wheels  Number of Doors  \\\n",
       "0               6.0            MANUAL  rear wheel drive              2.0   \n",
       "1               6.0            MANUAL  rear wheel drive              2.0   \n",
       "2               6.0            MANUAL  rear wheel drive              2.0   \n",
       "3               6.0            MANUAL  rear wheel drive              2.0   \n",
       "4               6.0            MANUAL  rear wheel drive              2.0   \n",
       "\n",
       "                         Market Category Vehicle Size Vehicle Style  \\\n",
       "0  Factory Tuner,Luxury,High-Performance      Compact         Coupe   \n",
       "1                     Luxury,Performance      Compact   Convertible   \n",
       "2                Luxury,High-Performance      Compact         Coupe   \n",
       "3                     Luxury,Performance      Compact         Coupe   \n",
       "4                                 Luxury      Compact   Convertible   \n",
       "\n",
       "   highway MPG  city mpg  Popularity   MSRP  \n",
       "0           26        19        3916  46135  \n",
       "1           28        19        3916  40650  \n",
       "2           28        20        3916  36350  \n",
       "3           28        18        3916  29450  \n",
       "4           28        18        3916  34500  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/home/sakshi/Downloads/cardataset/data.csv\")\n",
    "#Displaying top 5 rows\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Checking data\n",
    "This is necessary to check which type of data are we dealing with like the data has null values or not whether the data is categorical whether string type of data is present ,checking duplicacy of data etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11914, 16)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Engine HP</th>\n",
       "      <th>Engine Cylinders</th>\n",
       "      <th>Number of Doors</th>\n",
       "      <th>highway MPG</th>\n",
       "      <th>city mpg</th>\n",
       "      <th>Popularity</th>\n",
       "      <th>MSRP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>11914.000000</td>\n",
       "      <td>11845.00000</td>\n",
       "      <td>11884.000000</td>\n",
       "      <td>11908.000000</td>\n",
       "      <td>11914.000000</td>\n",
       "      <td>11914.000000</td>\n",
       "      <td>11914.000000</td>\n",
       "      <td>1.191400e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>2010.384338</td>\n",
       "      <td>249.38607</td>\n",
       "      <td>5.628829</td>\n",
       "      <td>3.436093</td>\n",
       "      <td>26.637485</td>\n",
       "      <td>19.733255</td>\n",
       "      <td>1554.911197</td>\n",
       "      <td>4.059474e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>7.579740</td>\n",
       "      <td>109.19187</td>\n",
       "      <td>1.780559</td>\n",
       "      <td>0.881315</td>\n",
       "      <td>8.863001</td>\n",
       "      <td>8.987798</td>\n",
       "      <td>1441.855347</td>\n",
       "      <td>6.010910e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1990.000000</td>\n",
       "      <td>55.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>2007.000000</td>\n",
       "      <td>170.00000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>549.000000</td>\n",
       "      <td>2.100000e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>227.00000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>1385.000000</td>\n",
       "      <td>2.999500e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>2016.000000</td>\n",
       "      <td>300.00000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>4.223125e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>2017.000000</td>\n",
       "      <td>1001.00000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>354.000000</td>\n",
       "      <td>137.000000</td>\n",
       "      <td>5657.000000</td>\n",
       "      <td>2.065902e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Year    Engine HP  Engine Cylinders  Number of Doors  \\\n",
       "count  11914.000000  11845.00000      11884.000000     11908.000000   \n",
       "mean    2010.384338    249.38607          5.628829         3.436093   \n",
       "std        7.579740    109.19187          1.780559         0.881315   \n",
       "min     1990.000000     55.00000          0.000000         2.000000   \n",
       "25%     2007.000000    170.00000          4.000000         2.000000   \n",
       "50%     2015.000000    227.00000          6.000000         4.000000   \n",
       "75%     2016.000000    300.00000          6.000000         4.000000   \n",
       "max     2017.000000   1001.00000         16.000000         4.000000   \n",
       "\n",
       "        highway MPG      city mpg    Popularity          MSRP  \n",
       "count  11914.000000  11914.000000  11914.000000  1.191400e+04  \n",
       "mean      26.637485     19.733255   1554.911197  4.059474e+04  \n",
       "std        8.863001      8.987798   1441.855347  6.010910e+04  \n",
       "min       12.000000      7.000000      2.000000  2.000000e+03  \n",
       "25%       22.000000     16.000000    549.000000  2.100000e+04  \n",
       "50%       26.000000     18.000000   1385.000000  2.999500e+04  \n",
       "75%       30.000000     22.000000   2009.000000  4.223125e+04  \n",
       "max      354.000000    137.000000   5657.000000  2.065902e+06  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Make                 False\n",
       "Model                False\n",
       "Year                 False\n",
       "Engine Fuel Type      True\n",
       "Engine HP             True\n",
       "Engine Cylinders      True\n",
       "Transmission Type    False\n",
       "Driven_Wheels        False\n",
       "Number of Doors       True\n",
       "Market Category       True\n",
       "Vehicle Size         False\n",
       "Vehicle Style        False\n",
       "highway MPG          False\n",
       "city mpg             False\n",
       "Popularity           False\n",
       "MSRP                 False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking null values\n",
    "df.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Make                    0\n",
       "Model                   0\n",
       "Year                    0\n",
       "Engine Fuel Type        3\n",
       "Engine HP              69\n",
       "Engine Cylinders       30\n",
       "Transmission Type       0\n",
       "Driven_Wheels           0\n",
       "Number of Doors         6\n",
       "Market Category      3742\n",
       "Vehicle Size            0\n",
       "Vehicle Style           0\n",
       "highway MPG             0\n",
       "city mpg                0\n",
       "Popularity              0\n",
       "MSRP                    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Make                  object\n",
       "Model                 object\n",
       "Year                   int64\n",
       "Engine Fuel Type      object\n",
       "Engine HP            float64\n",
       "Engine Cylinders     float64\n",
       "Transmission Type     object\n",
       "Driven_Wheels         object\n",
       "Number of Doors      float64\n",
       "Market Category       object\n",
       "Vehicle Size          object\n",
       "Vehicle Style         object\n",
       "highway MPG            int64\n",
       "city mpg               int64\n",
       "Popularity             int64\n",
       "MSRP                   int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking datatype of each column\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 11914 entries, 0 to 11913\n",
      "Data columns (total 16 columns):\n",
      "Make                 11914 non-null object\n",
      "Model                11914 non-null object\n",
      "Year                 11914 non-null int64\n",
      "Engine Fuel Type     11911 non-null object\n",
      "Engine HP            11845 non-null float64\n",
      "Engine Cylinders     11884 non-null float64\n",
      "Transmission Type    11914 non-null object\n",
      "Driven_Wheels        11914 non-null object\n",
      "Number of Doors      11908 non-null float64\n",
      "Market Category      8172 non-null object\n",
      "Vehicle Size         11914 non-null object\n",
      "Vehicle Style        11914 non-null object\n",
      "highway MPG          11914 non-null int64\n",
      "city mpg             11914 non-null int64\n",
      "Popularity           11914 non-null int64\n",
      "MSRP                 11914 non-null int64\n",
      "dtypes: float64(3), int64(5), object(8)\n",
      "memory usage: 1.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dropping Irrelevent columns\n",
    "\n",
    "This step is important in EDA because sometimes there are some columns that we never use and in such cases dropping is useful. In this case, the columns such as Engine Fuel Type and Number of doors maynot be very relevant.From above we can see that Market Category has may null values i.e (3476) so we will directly drop this column and also column like Number of doors and Engine fuel type are not much related so we will also drop this two columns.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>Engine HP</th>\n",
       "      <th>Engine Cylinders</th>\n",
       "      <th>Transmission Type</th>\n",
       "      <th>Driven_Wheels</th>\n",
       "      <th>Vehicle Size</th>\n",
       "      <th>Vehicle Style</th>\n",
       "      <th>highway MPG</th>\n",
       "      <th>city mpg</th>\n",
       "      <th>Popularity</th>\n",
       "      <th>MSRP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series M</td>\n",
       "      <td>2011</td>\n",
       "      <td>335.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Coupe</td>\n",
       "      <td>26</td>\n",
       "      <td>19</td>\n",
       "      <td>3916</td>\n",
       "      <td>46135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2011</td>\n",
       "      <td>300.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Convertible</td>\n",
       "      <td>28</td>\n",
       "      <td>19</td>\n",
       "      <td>3916</td>\n",
       "      <td>40650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2011</td>\n",
       "      <td>300.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Coupe</td>\n",
       "      <td>28</td>\n",
       "      <td>20</td>\n",
       "      <td>3916</td>\n",
       "      <td>36350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2011</td>\n",
       "      <td>230.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Coupe</td>\n",
       "      <td>28</td>\n",
       "      <td>18</td>\n",
       "      <td>3916</td>\n",
       "      <td>29450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2011</td>\n",
       "      <td>230.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Convertible</td>\n",
       "      <td>28</td>\n",
       "      <td>18</td>\n",
       "      <td>3916</td>\n",
       "      <td>34500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Make       Model  Year  Engine HP  Engine Cylinders Transmission Type  \\\n",
       "0  BMW  1 Series M  2011      335.0               6.0            MANUAL   \n",
       "1  BMW    1 Series  2011      300.0               6.0            MANUAL   \n",
       "2  BMW    1 Series  2011      300.0               6.0            MANUAL   \n",
       "3  BMW    1 Series  2011      230.0               6.0            MANUAL   \n",
       "4  BMW    1 Series  2011      230.0               6.0            MANUAL   \n",
       "\n",
       "      Driven_Wheels Vehicle Size Vehicle Style  highway MPG  city mpg  \\\n",
       "0  rear wheel drive      Compact         Coupe           26        19   \n",
       "1  rear wheel drive      Compact   Convertible           28        19   \n",
       "2  rear wheel drive      Compact         Coupe           28        20   \n",
       "3  rear wheel drive      Compact         Coupe           28        18   \n",
       "4  rear wheel drive      Compact   Convertible           28        18   \n",
       "\n",
       "   Popularity   MSRP  \n",
       "0        3916  46135  \n",
       "1        3916  40650  \n",
       "2        3916  36350  \n",
       "3        3916  29450  \n",
       "4        3916  34500  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.drop(['Engine Fuel Type', 'Number of Doors','Market Category'], axis=1)\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11914, 13)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#after dropping\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Renaming Columns\n",
    "Sometimes names are not easily readable so this for improving redability of the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.rename(columns = {'Engine HP':'HP', 'Engine Cylinders':'Cylinders', \n",
    "                              'Transmission Type':'Transmission','Driven_Wheels': 'Drive Mode','highway MPG': 'MPG-H', \n",
    "                     'city mpg': 'MPG-C', 'MSRP': 'Price'}, inplace = True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>HP</th>\n",
       "      <th>Cylinders</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Drive Mode</th>\n",
       "      <th>Vehicle Size</th>\n",
       "      <th>Vehicle Style</th>\n",
       "      <th>MPG-H</th>\n",
       "      <th>MPG-C</th>\n",
       "      <th>Popularity</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series M</td>\n",
       "      <td>2011</td>\n",
       "      <td>335.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Coupe</td>\n",
       "      <td>26</td>\n",
       "      <td>19</td>\n",
       "      <td>3916</td>\n",
       "      <td>46135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2011</td>\n",
       "      <td>300.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Convertible</td>\n",
       "      <td>28</td>\n",
       "      <td>19</td>\n",
       "      <td>3916</td>\n",
       "      <td>40650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2011</td>\n",
       "      <td>300.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Coupe</td>\n",
       "      <td>28</td>\n",
       "      <td>20</td>\n",
       "      <td>3916</td>\n",
       "      <td>36350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2011</td>\n",
       "      <td>230.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Coupe</td>\n",
       "      <td>28</td>\n",
       "      <td>18</td>\n",
       "      <td>3916</td>\n",
       "      <td>29450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2011</td>\n",
       "      <td>230.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Convertible</td>\n",
       "      <td>28</td>\n",
       "      <td>18</td>\n",
       "      <td>3916</td>\n",
       "      <td>34500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11909</td>\n",
       "      <td>Acura</td>\n",
       "      <td>ZDX</td>\n",
       "      <td>2012</td>\n",
       "      <td>300.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>AUTOMATIC</td>\n",
       "      <td>all wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>4dr Hatchback</td>\n",
       "      <td>23</td>\n",
       "      <td>16</td>\n",
       "      <td>204</td>\n",
       "      <td>46120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11910</td>\n",
       "      <td>Acura</td>\n",
       "      <td>ZDX</td>\n",
       "      <td>2012</td>\n",
       "      <td>300.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>AUTOMATIC</td>\n",
       "      <td>all wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>4dr Hatchback</td>\n",
       "      <td>23</td>\n",
       "      <td>16</td>\n",
       "      <td>204</td>\n",
       "      <td>56670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11911</td>\n",
       "      <td>Acura</td>\n",
       "      <td>ZDX</td>\n",
       "      <td>2012</td>\n",
       "      <td>300.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>AUTOMATIC</td>\n",
       "      <td>all wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>4dr Hatchback</td>\n",
       "      <td>23</td>\n",
       "      <td>16</td>\n",
       "      <td>204</td>\n",
       "      <td>50620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11912</td>\n",
       "      <td>Acura</td>\n",
       "      <td>ZDX</td>\n",
       "      <td>2013</td>\n",
       "      <td>300.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>AUTOMATIC</td>\n",
       "      <td>all wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>4dr Hatchback</td>\n",
       "      <td>23</td>\n",
       "      <td>16</td>\n",
       "      <td>204</td>\n",
       "      <td>50920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11913</td>\n",
       "      <td>Lincoln</td>\n",
       "      <td>Zephyr</td>\n",
       "      <td>2006</td>\n",
       "      <td>221.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>AUTOMATIC</td>\n",
       "      <td>front wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>26</td>\n",
       "      <td>17</td>\n",
       "      <td>61</td>\n",
       "      <td>28995</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11914 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Make       Model  Year     HP  Cylinders Transmission  \\\n",
       "0          BMW  1 Series M  2011  335.0        6.0       MANUAL   \n",
       "1          BMW    1 Series  2011  300.0        6.0       MANUAL   \n",
       "2          BMW    1 Series  2011  300.0        6.0       MANUAL   \n",
       "3          BMW    1 Series  2011  230.0        6.0       MANUAL   \n",
       "4          BMW    1 Series  2011  230.0        6.0       MANUAL   \n",
       "...        ...         ...   ...    ...        ...          ...   \n",
       "11909    Acura         ZDX  2012  300.0        6.0    AUTOMATIC   \n",
       "11910    Acura         ZDX  2012  300.0        6.0    AUTOMATIC   \n",
       "11911    Acura         ZDX  2012  300.0        6.0    AUTOMATIC   \n",
       "11912    Acura         ZDX  2013  300.0        6.0    AUTOMATIC   \n",
       "11913  Lincoln      Zephyr  2006  221.0        6.0    AUTOMATIC   \n",
       "\n",
       "              Drive Mode Vehicle Size  Vehicle Style  MPG-H  MPG-C  \\\n",
       "0       rear wheel drive      Compact          Coupe     26     19   \n",
       "1       rear wheel drive      Compact    Convertible     28     19   \n",
       "2       rear wheel drive      Compact          Coupe     28     20   \n",
       "3       rear wheel drive      Compact          Coupe     28     18   \n",
       "4       rear wheel drive      Compact    Convertible     28     18   \n",
       "...                  ...          ...            ...    ...    ...   \n",
       "11909    all wheel drive      Midsize  4dr Hatchback     23     16   \n",
       "11910    all wheel drive      Midsize  4dr Hatchback     23     16   \n",
       "11911    all wheel drive      Midsize  4dr Hatchback     23     16   \n",
       "11912    all wheel drive      Midsize  4dr Hatchback     23     16   \n",
       "11913  front wheel drive      Midsize          Sedan     26     17   \n",
       "\n",
       "       Popularity  Price  \n",
       "0            3916  46135  \n",
       "1            3916  40650  \n",
       "2            3916  36350  \n",
       "3            3916  29450  \n",
       "4            3916  34500  \n",
       "...           ...    ...  \n",
       "11909         204  46120  \n",
       "11910         204  56670  \n",
       "11911         204  50620  \n",
       "11912         204  50920  \n",
       "11913          61  28995  \n",
       "\n",
       "[11914 rows x 13 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Check for  null values and remove them\n",
    "This step is important because if there are null values our output may not be correct."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Make              0\n",
       "Model             0\n",
       "Year              0\n",
       "HP               69\n",
       "Cylinders        30\n",
       "Transmission      0\n",
       "Drive Mode        0\n",
       "Vehicle Size      0\n",
       "Vehicle Style     0\n",
       "MPG-H             0\n",
       "MPG-C             0\n",
       "Popularity        0\n",
       "Price             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Columns HP and Cylinders have null values so we will remove them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11816, 13)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dropna(inplace=True,axis=0)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Make             0\n",
       "Model            0\n",
       "Year             0\n",
       "HP               0\n",
       "Cylinders        0\n",
       "Transmission     0\n",
       "Drive Mode       0\n",
       "Vehicle Size     0\n",
       "Vehicle Style    0\n",
       "MPG-H            0\n",
       "MPG-C            0\n",
       "Popularity       0\n",
       "Price            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#after removing null values\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "now we can see that there are no null values.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dropping Duplicates\n",
    "\n",
    "This is often a good practice to do so  because a huge data set as in this case contains more than 10, 000 rows often have some duplicate data, so here we remove all the duplicate value from the data-set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>HP</th>\n",
       "      <th>Cylinders</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Drive Mode</th>\n",
       "      <th>Vehicle Size</th>\n",
       "      <th>Vehicle Style</th>\n",
       "      <th>MPG-H</th>\n",
       "      <th>MPG-C</th>\n",
       "      <th>Popularity</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>BMW</td>\n",
       "      <td>1 Series</td>\n",
       "      <td>2013</td>\n",
       "      <td>230.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>rear wheel drive</td>\n",
       "      <td>Compact</td>\n",
       "      <td>Coupe</td>\n",
       "      <td>28</td>\n",
       "      <td>19</td>\n",
       "      <td>3916</td>\n",
       "      <td>31500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>Audi</td>\n",
       "      <td>100</td>\n",
       "      <td>1992</td>\n",
       "      <td>172.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>front wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>24</td>\n",
       "      <td>17</td>\n",
       "      <td>3105</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>Audi</td>\n",
       "      <td>100</td>\n",
       "      <td>1992</td>\n",
       "      <td>172.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>front wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>24</td>\n",
       "      <td>17</td>\n",
       "      <td>3105</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24</td>\n",
       "      <td>Audi</td>\n",
       "      <td>100</td>\n",
       "      <td>1993</td>\n",
       "      <td>172.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>front wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>24</td>\n",
       "      <td>17</td>\n",
       "      <td>3105</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25</td>\n",
       "      <td>Audi</td>\n",
       "      <td>100</td>\n",
       "      <td>1993</td>\n",
       "      <td>172.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>front wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>24</td>\n",
       "      <td>17</td>\n",
       "      <td>3105</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11481</td>\n",
       "      <td>Suzuki</td>\n",
       "      <td>X-90</td>\n",
       "      <td>1998</td>\n",
       "      <td>95.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>MANUAL</td>\n",
       "      <td>four wheel drive</td>\n",
       "      <td>Compact</td>\n",
       "      <td>2dr SUV</td>\n",
       "      <td>26</td>\n",
       "      <td>22</td>\n",
       "      <td>481</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11603</td>\n",
       "      <td>Volvo</td>\n",
       "      <td>XC60</td>\n",
       "      <td>2017</td>\n",
       "      <td>302.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>AUTOMATIC</td>\n",
       "      <td>all wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>4dr SUV</td>\n",
       "      <td>29</td>\n",
       "      <td>20</td>\n",
       "      <td>870</td>\n",
       "      <td>46350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11604</td>\n",
       "      <td>Volvo</td>\n",
       "      <td>XC60</td>\n",
       "      <td>2017</td>\n",
       "      <td>240.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>AUTOMATIC</td>\n",
       "      <td>front wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>4dr SUV</td>\n",
       "      <td>30</td>\n",
       "      <td>23</td>\n",
       "      <td>870</td>\n",
       "      <td>40950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11708</td>\n",
       "      <td>Suzuki</td>\n",
       "      <td>XL7</td>\n",
       "      <td>2008</td>\n",
       "      <td>252.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>AUTOMATIC</td>\n",
       "      <td>all wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>4dr SUV</td>\n",
       "      <td>22</td>\n",
       "      <td>15</td>\n",
       "      <td>481</td>\n",
       "      <td>29149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11717</td>\n",
       "      <td>Suzuki</td>\n",
       "      <td>XL7</td>\n",
       "      <td>2008</td>\n",
       "      <td>252.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>AUTOMATIC</td>\n",
       "      <td>front wheel drive</td>\n",
       "      <td>Midsize</td>\n",
       "      <td>4dr SUV</td>\n",
       "      <td>22</td>\n",
       "      <td>16</td>\n",
       "      <td>481</td>\n",
       "      <td>27499</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>792 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Make     Model  Year     HP  Cylinders Transmission  \\\n",
       "14        BMW  1 Series  2013  230.0        6.0       MANUAL   \n",
       "18       Audi       100  1992  172.0        6.0       MANUAL   \n",
       "20       Audi       100  1992  172.0        6.0       MANUAL   \n",
       "24       Audi       100  1993  172.0        6.0       MANUAL   \n",
       "25       Audi       100  1993  172.0        6.0       MANUAL   \n",
       "...       ...       ...   ...    ...        ...          ...   \n",
       "11481  Suzuki      X-90  1998   95.0        4.0       MANUAL   \n",
       "11603   Volvo      XC60  2017  302.0        4.0    AUTOMATIC   \n",
       "11604   Volvo      XC60  2017  240.0        4.0    AUTOMATIC   \n",
       "11708  Suzuki       XL7  2008  252.0        6.0    AUTOMATIC   \n",
       "11717  Suzuki       XL7  2008  252.0        6.0    AUTOMATIC   \n",
       "\n",
       "              Drive Mode Vehicle Size Vehicle Style  MPG-H  MPG-C  Popularity  \\\n",
       "14      rear wheel drive      Compact         Coupe     28     19        3916   \n",
       "18     front wheel drive      Midsize         Sedan     24     17        3105   \n",
       "20     front wheel drive      Midsize         Sedan     24     17        3105   \n",
       "24     front wheel drive      Midsize         Sedan     24     17        3105   \n",
       "25     front wheel drive      Midsize         Sedan     24     17        3105   \n",
       "...                  ...          ...           ...    ...    ...         ...   \n",
       "11481   four wheel drive      Compact       2dr SUV     26     22         481   \n",
       "11603    all wheel drive      Midsize       4dr SUV     29     20         870   \n",
       "11604  front wheel drive      Midsize       4dr SUV     30     23         870   \n",
       "11708    all wheel drive      Midsize       4dr SUV     22     15         481   \n",
       "11717  front wheel drive      Midsize       4dr SUV     22     16         481   \n",
       "\n",
       "       Price  \n",
       "14     31500  \n",
       "18      2000  \n",
       "20      2000  \n",
       "24      2000  \n",
       "25      2000  \n",
       "...      ...  \n",
       "11481   2000  \n",
       "11603  46350  \n",
       "11604  40950  \n",
       "11708  29149  \n",
       "11717  27499  \n",
       "\n",
       "[792 rows x 13 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=df[df.duplicated(keep='first')]\n",
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " From this we can see there are 792 duplicate rows so we will remove them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dropping duplicates\n",
    "data=df.drop_duplicates(keep='first')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11024, 13)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see the number of rows are reduced after dropping."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Detecting Outliers\n",
    "An outlier is a point or set of points that are different from other points. Sometimes they can be very high or very low. It's often a good idea to detect and remove the outliers. Because outliers are one of the primary reasons for resulting in a less accurate model. Often outliers can be seen with visualizations using a box plot. Shown below are the box plot of MSRP, Cylinders, Horsepower and EngineSize. Herein all the plots, you can find some points are outside the box they are none other than outliers. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f0b19df1990>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data['HP'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    11024.000000\n",
       "mean       252.656477\n",
       "std        109.992446\n",
       "min         55.000000\n",
       "25%        171.000000\n",
       "50%        237.000000\n",
       "75%        302.000000\n",
       "max       1001.000000\n",
       "Name: HP, dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['HP'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f0b19b2df90>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAEGCAYAAABbzE8LAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAANRklEQVR4nO3dfWxdd3nA8e+TmEKCtaVd+rakWhgp7aDLSmo29lZCYFpXUDumSevEpCKmTZu2JKXbGKgSSf+YNI0po7XQUBUgVakKqPRNEUxUzVqkTevmZCVtmjLMW4np2gAaI5DRJnn2xznObNdZe5t773Nifz+SFd9r55zHN87XP59777mRmUiShm9J9QCStFgZYEkqYoAlqYgBlqQiBliSioz08skrV67MNWvWDGgUSVqY9uzZ8+3MPHvu9T0FeM2aNUxMTPRvKklaBCLiG/Nd7yEISSpigCWpiAGWpCIGWJKKGGBJKmKAJamIAZakIgZYkooYYEkqYoAlqYgBlqQiBliSihhgSSpigCWpiAGWpCIGWJKKGGBJKmKAJamIAZakIj29JpyGY3x8nMnJyeoxnmdqaooVK1awY8eO6lGkBcEAd9Dk5CSPPHaAY8vPqh5llqXf/w5HjhypHkNaMAxwRx1bfhZHLr6yeoxZRvfeVj2CtKB4DFiSihhgSSpigCWpiAGWpCIGWJKKGGBJKmKAJamIAZakIgZYkooYYEkqYoAlqYgBlqQiBliSihhgSSpigCWpiAGWpCIGWJKKGGBJKmKAJamIAZakIgZYkooYYEkqYoAlqYgBlqQiBliSihhgSSpigCWpiAGWpCIGWJKKGGBJKmKAJamIAZakIgZYkooYYEkqYoAlqYgBlqQiBliSihhgSSpigCWpiAGWpCIGWJKKGOA+GR8fZ3x8vHqMRcnbXqerkeoBForJycnqERYtb3udrlwBS1IRAyxJRQywJBUxwJJUxABLUhEDLElFDLAkFTHAklTEAEtSEQMsSUUMsCQVMcCSVMQAS1IRAyxJRQywJBUxwJJUxABLUhEDLElFDLAkFTHAklTEAEtSEQMsSUUMsCQVMcCSVMQAS1IRAyxJRQywJBUxwJJUxABLUhEDLElFDLAkFTHAklTEAEtSEQMsSUUMsCQVMcCSVMQAS1IRAyxJRYYS4M2bN7Nhwwauv/76YexO6oQNGzaceOuSrs7VVRMTE2zcuJE9e/b0fdtDCfC+ffsA2Lt37zB2J0l9s23bNo4fP87WrVv7vu2BB3jz5s2zLrsK1mIwd3XZldVmV+fqqomJCQ4fPgzA4cOH+74KHunr1uYxvfqdtlBXwVNTUxw5coQtW7ac8rYmJydZ8mz2Yao+O36sb19jP01OTrJs2bLqMbQAbdu2bdblrVu3smvXrr5t/wVXwBHxhxExEREThw4d6tuOJanrple/J7t8ql5wBZyZtwC3AIyNjXVwWdYNq1atAuCmm2465W1t2bKFPV99+pS303dLlrLsFWf05Wvsp66tyLVwjI6Ozoru6OhoX7c/8GPA69atm3V5/fr1g96lJPXF3EMQN954Y1+3P/AA33zzzbMub9++fdC7lMo9+OCD/+/lKl2dq6vGxsZOrHpHR0e57LLL+rr9oTwMbXoV7OpX0ulm27ZtLFmypO+rXxjCoyDg+atgaTHo6uqyq3N11djYGLt37x7Itn0qsiQVMcCSVMQAS1IRAyxJRQywJBUxwJJUxABLUhEDLElFDLAkFTHAklTEAEtSEQMsSUUMsCQVMcCSVMQAS1IRAyxJRQywJBUxwJJUxABLUhEDLElFDLAkFTHAklTEAEtSEQMsSUUMsCQVMcCSVMQAS1IRAyxJRQywJBUxwJJUxABLUhEDLElFDLAkFTHAklTEAEtSEQMsSUUMsCQVMcCSVGSkeoCFYu3atdUjLFre9jpdGeA+2bRpU/UIi5a3vU5XHoKQpCIGWJKKGGBJKmKAJamIAZakIgZYkooYYEkqYoAlqYgBlqQiBliSihhgSSpigCWpiAGWpCIGWJKKGGBJKmKAJamIAZakIgZYkooYYEkqYoAlqYgBlqQiBliSihhgSSpigCWpiAGWpCIGWJKKGGBJKmKAJamIAZakIgZYkooYYEkqYoAlqYgBlqQiBliSihhgSSpigCWpiAGWpCIGWJKKGGBJKmKAJanISPUAmt/SH36XZU98tnqM2Y4dBc6onkJaMAxwB61du7Z6hHlNTR1lxYoV1WNIC4YB7qBNmzZVjyBpCDwGLElFDLAkFTHAklTEAEtSEQMsSUUMsCQVMcCSVMQAS1IRAyxJRQywJBUxwJJUxABLUhEDLElFDLAkFTHAklTEAEtSEQMsSUUMsCQVMcCSVMQAS1KRyMwX/8kRh4BvvMR9rQS+/RL/7iA5V2+cqzfO1ZuFOtdPZebZc6/sKcCnIiImMnNsKDvrgXP1xrl641y9WWxzeQhCkooYYEkqMswA3zLEffXCuXrjXL1xrt4sqrmGdgxYkjSbhyAkqYgBlqQiAw9wRFwREV+KiMmIeN+g9/diRcQFEfGPEXEgIvZHxJbqmaZFxNKI+PeI2FU9y0wRsSIi7oyIJ9rb7RerZwKIiPe0/4aPRcQdEfGKojk+FhHPRMRjM647KyLuj4gvt3+e2ZG5Ptj+O+6LiLsjYkUX5prxsT+PiIyIlV2ZKyI2tS3bHxF/0499DTTAEbEU+DDwG8Brgd+NiNcOcp89OAr8WWb+DPBG4E86NNsW4ED1EPO4CfiHzLwY+Dk6MGNErAI2A2OZeQmwFLimaJydwBVzrnsf8EBmXgg80F4etp08f677gUsycx3wH8D7hz0U889FRFwA/Brw5LAHau1kzlwR8WbgamBdZr4O+Nt+7GjQK+CfByYz86uZ+SzwSZovolxmPpWZe9v3v08Tk1W1U0FErAbeBuyonmWmiPgx4HLgowCZ+Wxm/lftVCeMAMsiYgRYDnyrYojM/ALw3TlXXw3c2r5/K/CbQx2K+efKzM9n5tH24r8Aq7swV+vvgPcCJY8QOMlcfwz8dWb+qP2cZ/qxr0EHeBXwzRmXD9KByM0VEWuA1wMP104CwIdovvmOVw8yx08Dh4CPt4dHdkTEK6uHyswpmtXIk8BTwPcy8/O1U81ybmY+Bc0PfeCc4nnm827gc9VDAETEVcBUZn6xepY5XgP8akQ8HBEPRcQb+rHRQQc45rmuU497i4hR4DPAdZn538WzvB14JjP3VM5xEiPAeuDvM/P1wA+o+XV6lvaY6tXAq4CfBF4ZEb9XO9XpIyJuoDkcd3sHZlkO3AB8oHqWeYwAZ9IcrvwL4NMRMV/fejLoAB8ELphxeTVFvx7OJyJeRhPf2zPzrup5gF8GroqIr9McrtkYEZ+oHemEg8DBzJz+LeFOmiBXeyvwtcw8lJnPAXcBv1Q800xPR8T5AO2fffnVtR8i4lrg7cA7sxtPCHg1zQ/SL7b/B1YDeyPivNKpGgeBu7LxrzS/oZ7yHYSDDvC/ARdGxKsi4gyaO0fuG/A+X5T2p9dHgQOZub16HoDMfH9mrs7MNTS31e7M7MRqLjP/E/hmRFzUXvUW4PHCkaY9CbwxIpa3/6ZvoQN3Ds5wH3Bt+/61wL2Fs5wQEVcAfwlclZk/rJ4HIDMfzcxzMnNN+3/gILC+/d6rdg+wESAiXgOcQT/O2paZA30DrqS5l/UrwA2D3l8Pc/0KzeGQfcAj7duV1XPNmG8DsKt6jjkzXQpMtLfZPcCZ1TO1c90IPAE8BtwGvLxojjtojkM/RxOP3wd+gubRD19u/zyrI3NN0tw/M/29/5EuzDXn418HVnZhLprgfqL9HtsLbOzHvnwqsiQV8ZlwklTEAEtSEQMsSUUMsCQVMcCSVMQAa6gi4ryI+GREfCUiHo+Iz7aPq5zvczdMnxEuIq7q9Wx6EbEzIn67H3NLgzBSPYAWj/aJEncDt2bmNe11lwLn0jxW/KQy8z4G/CSeiBjJ/ztBjTRwBljD9Gbgucz8yPQVmflIRNwWEWdl5r0AEXE78CngxLk5IuJdNKec/NOI2Nl+bAw4D3hvZt7ZBn6c5hlLX2PGuUgi4jJgOzBK8wymd2XmUxHxIPDPNE8Dvy8ingS2AsdoTuxz+UBuCQkDrOG6BJjvREM7gPcA90bEj9Ocy+Fammcrnsz57ccvplkZ3wm8A7gI+FmaVfXjwMfac36MA1dn5qGI+B3gr2jOAgawIjPfBBARjwK/nplTFScp1+JigFUuMx+KiA9HxDnAbwGfycyjL3CyqXsy8zjweESc2153OXBHZh4DvhURu9vrL6KJ//3tNpfSPNV02qdmvP9PwM6I+DTNiX2kgTHAGqb9wMnuFLsNeCfNSYjefZLPmelHM96fWer5nlsfwP7MPNlLKP3gxF/O/KOI+AWak+I/EhGXZuZ3XsQ8Us98FISGaTfw8oj4g+krIuINEfEmmpeBuQ4gM/e/xO1/AbgmmtfUO5/mmDPAl4Czp1/DLiJeFhGvm28DEfHqzHw4Mz9Ac6z4gvk+T+oHV8AamszMiHgH8KH2IWX/Q3PGq+sy8+mIOEBzlrWX6m6aO+AepXlUxUPtfp9tH452c3uMeYTmlUfmC/0HI+JCmlXzA0DXXplBC4hnQ1MntK+G8CjN+V+/Vz2PNAweglC5iHgrzfl8x42vFhNXwJJUxBWwJBUxwJJUxABLUhEDLElFDLAkFflfqf2IPXDAd5YAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data['Cylinders'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    11024.000000\n",
       "mean         5.674438\n",
       "std          1.763546\n",
       "min          0.000000\n",
       "25%          4.000000\n",
       "50%          6.000000\n",
       "75%          6.000000\n",
       "max         16.000000\n",
       "Name: Cylinders, dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Cylinders'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f0b19a4b510>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data['MPG-H'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    11024.000000\n",
       "mean        26.326560\n",
       "std          7.473018\n",
       "min         12.000000\n",
       "25%         22.000000\n",
       "50%         25.000000\n",
       "75%         30.000000\n",
       "max        354.000000\n",
       "Name: MPG-H, dtype: float64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['MPG-H'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f0b199bfe90>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data['MPG-C'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    11024.000000\n",
       "mean        19.338534\n",
       "std          6.608206\n",
       "min          7.000000\n",
       "25%         16.000000\n",
       "50%         18.000000\n",
       "75%         22.000000\n",
       "max        137.000000\n",
       "Name: MPG-C, dtype: float64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['MPG-C'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Year              9.00\n",
      "HP              131.00\n",
      "Cylinders         2.00\n",
      "MPG-H             8.00\n",
      "MPG-C             6.00\n",
      "Popularity     1460.00\n",
      "Price         21426.25\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#outliers\n",
    "Q1 = data.quantile(0.25)\n",
    "Q3 = data.quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "print(IQR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8546, 13)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = data[~((data < (Q1 - 1.5 * IQR)) |(data > (Q3 + 1.5 * IQR))).any(axis=1)]\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After removing outliers this is the final shape of our dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Top Car Brands\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "carr=data['Make'].value_counts().head(5).to_frame()\n",
    "m= carr.style.background_gradient(cmap='Blues')\n",
    "colors=['blue','red','yellow','green','brown']\n",
    "labels= ['Chevrolet','Ford','Volkswagen','Toyota','Dodge']\n",
    "sizes= ['1123','881','809','746','626']\n",
    "explode=[0.1,0.1,0.1,0.1,0.1]\n",
    "values=data['Make'].value_counts().head(5).to_frame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/sakshi/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: MatplotlibDeprecationWarning: Non-1D inputs to pie() are currently squeeze()d, but this behavior is deprecated since 3.1 and will be removed in 3.3; pass a 1D array instead.\n",
      "  \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Top 5 car brands\n",
    "plt.figure(figsize=(7,7))\n",
    "plt.pie(values,explode=None,labels=labels,colors=colors,autopct='%1.1f%%')\n",
    "plt.title('TOP 5 Car brands in the dataset',color='black',fontsize=10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Chevrolet, Ford, Volkswagen, Toyota and Dodge are the brands most present in our dataset.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Top 10 car brands\n",
    "# Percentage of car per brand\n",
    "\n",
    "counts = data['Make'].value_counts()*100/sum(data['Make'].value_counts())\n",
    "popular_cars = counts.index[:10]\n",
    "\n",
    "#plot\n",
    "plt.figure(figsize=(10,5))\n",
    "plt.barh(popular_cars, width=counts[:10],color='red')\n",
    "plt.title('Proportion of car /brand in America(%)')\n",
    "plt.xlabel('Proportion')\n",
    "plt.ylabel('Car brand')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Average price among top car brands"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   Price\n",
      "Make                    \n",
      "Chevrolet   28142.855891\n",
      "Dodge       26076.722353\n",
      "GMC         33261.400853\n",
      "Honda       27381.364611\n",
      "Mazda       20495.820106\n",
      "Nissan      28352.543860\n",
      "Toyota      27769.421793\n",
      "Volkswagen  29032.817476\n"
     ]
    }
   ],
   "source": [
    "#avg price of top 10 car brands\n",
    "avg_price = data[['Make','Price']].loc[(data['Make'] == 'Chevrolet')|\n",
    "               (data['Make'] == 'Ford')|\n",
    "               (data['Make'] == 'Volkswagen')|\n",
    "               (data['Make'] == 'Toyota')|\n",
    "               (data['Make'] == 'Dodge')|\n",
    "               (data['Make'] == 'Nissan')|\n",
    "               (data['Make'] == 'GMC')|\n",
    "               (data['Make'] == 'Honda')|\n",
    "               (data['Make'] == 'Mazda')].groupby('Make').mean()\n",
    "print(avg_price)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Correlation matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "car_corr=data.corr()\n",
    "f,ax=plt.subplots(figsize=(12,7))\n",
    "sns.heatmap(car_corr,annot=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>HP</th>\n",
       "      <th>Cylinders</th>\n",
       "      <th>MPG-H</th>\n",
       "      <th>MPG-C</th>\n",
       "      <th>Popularity</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Year</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.325104</td>\n",
       "      <td>-0.106597</td>\n",
       "      <td>0.373319</td>\n",
       "      <td>0.335236</td>\n",
       "      <td>0.200710</td>\n",
       "      <td>0.591439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>HP</td>\n",
       "      <td>0.325104</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.734094</td>\n",
       "      <td>-0.453451</td>\n",
       "      <td>-0.554768</td>\n",
       "      <td>0.095161</td>\n",
       "      <td>0.745852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Cylinders</td>\n",
       "      <td>-0.106597</td>\n",
       "      <td>0.734094</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.691395</td>\n",
       "      <td>-0.746361</td>\n",
       "      <td>0.013373</td>\n",
       "      <td>0.389049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MPG-H</td>\n",
       "      <td>0.373319</td>\n",
       "      <td>-0.453451</td>\n",
       "      <td>-0.691395</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.936978</td>\n",
       "      <td>0.093002</td>\n",
       "      <td>-0.121262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MPG-C</td>\n",
       "      <td>0.335236</td>\n",
       "      <td>-0.554768</td>\n",
       "      <td>-0.746361</td>\n",
       "      <td>0.936978</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.081110</td>\n",
       "      <td>-0.197330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Popularity</td>\n",
       "      <td>0.200710</td>\n",
       "      <td>0.095161</td>\n",
       "      <td>0.013373</td>\n",
       "      <td>0.093002</td>\n",
       "      <td>0.081110</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.113604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Price</td>\n",
       "      <td>0.591439</td>\n",
       "      <td>0.745852</td>\n",
       "      <td>0.389049</td>\n",
       "      <td>-0.121262</td>\n",
       "      <td>-0.197330</td>\n",
       "      <td>0.113604</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Year        HP  Cylinders     MPG-H     MPG-C  Popularity  \\\n",
       "Year        1.000000  0.325104  -0.106597  0.373319  0.335236    0.200710   \n",
       "HP          0.325104  1.000000   0.734094 -0.453451 -0.554768    0.095161   \n",
       "Cylinders  -0.106597  0.734094   1.000000 -0.691395 -0.746361    0.013373   \n",
       "MPG-H       0.373319 -0.453451  -0.691395  1.000000  0.936978    0.093002   \n",
       "MPG-C       0.335236 -0.554768  -0.746361  0.936978  1.000000    0.081110   \n",
       "Popularity  0.200710  0.095161   0.013373  0.093002  0.081110    1.000000   \n",
       "Price       0.591439  0.745852   0.389049 -0.121262 -0.197330    0.113604   \n",
       "\n",
       "               Price  \n",
       "Year        0.591439  \n",
       "HP          0.745852  \n",
       "Cylinders   0.389049  \n",
       "MPG-H      -0.121262  \n",
       "MPG-C      -0.197330  \n",
       "Popularity  0.113604  \n",
       "Price       1.000000  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "car_corr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Highly correlated features are\n",
    "\n",
    "1.MPG-H and MPG-C\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.HP and Cylinders\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3.HP and Price"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# High anticorrelation\n",
    "1.Cylinders & MPG-H"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.Cylinders and MPG-C"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cylinders have a strong negative correlation with MPG-H and MPG-C because lower MPG figures mean higher fuel consumption.\n",
    "\n",
    "# Scatter Plots(Visualisation)\n",
    "We generally use scatter plots to find the correlation between two variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot between Price and HP\n",
    "plt.scatter(data['Price'],data['HP'],color='#ff7f0e' )\n",
    "plt.xlabel('Price', weight='bold',fontsize=10)\n",
    "plt.ylabel('HP', weight='bold', fontsize=10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that HP is highly correleated with Price. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot between Price and Cylinders\n",
    "\n",
    "plt.scatter(data['Price'],data['Cylinders'])\n",
    "plt.xlabel('Price', weight='bold',fontsize=10)\n",
    "plt.ylabel('Cylinders', weight='bold', fontsize=10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot between Price and Year\n",
    "\n",
    "plt.scatter(data['Price'],data['Year'],color='#2ca02c')\n",
    "plt.xlabel('Price', weight='bold',fontsize=10)\n",
    "plt.ylabel('Year', weight='bold', fontsize=10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot between Price and Popularity\n",
    "\n",
    "plt.scatter(data['Price'],data['Popularity'],color='#ff7f0e')\n",
    "plt.xlabel('Price', weight='bold',fontsize=10)\n",
    "plt.ylabel('Popularity', weight='bold', fontsize=10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Bar plot between Vehicle Size and Price\n",
    "sns.barplot(x=data['Vehicle Size'], y=data['Price'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Label Encoder\n",
    "This is necessary to convert categorical variables into numerical."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import the library\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "#encoding the columns\n",
    "for column in data.columns:\n",
    "    if data[column].dtype==np.number:\n",
    "        continue\n",
    "    data[column]=LabelEncoder().fit_transform(data[column])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data[data.columns.difference(['Price'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#target \n",
    "Y=data['Price']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Splitting the data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting data into training and testing\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3,random_state=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "linear = LinearRegression()\n",
    "linear.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-143.70703480739303\n"
     ]
    }
   ],
   "source": [
    "# To find intercept\n",
    "print(linear.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-9.03099006e+01 -1.35316999e+02  1.26050717e+01 -2.71175240e+00\n",
      "  1.65856132e+00 -5.92273355e+00 -2.45256665e-01 -1.08783383e+01\n",
      " -2.93909039e+02  4.89596701e+01 -9.62905865e+00  6.00642875e+01]\n"
     ]
    }
   ],
   "source": [
    "#To find slope\n",
    "print(linear.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Prediction\n",
    "y_test_predict = linear.predict(X_test)\n",
    "\n",
    "y_train_predict= linear.predict(X_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Actual</th>\n",
       "      <th>Predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>6757</td>\n",
       "      <td>4219</td>\n",
       "      <td>2653.903881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1074</td>\n",
       "      <td>3275</td>\n",
       "      <td>2580.370627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7629</td>\n",
       "      <td>3223</td>\n",
       "      <td>3180.240174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11338</td>\n",
       "      <td>463</td>\n",
       "      <td>660.692498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8252</td>\n",
       "      <td>4390</td>\n",
       "      <td>3123.043382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1268</td>\n",
       "      <td>2176</td>\n",
       "      <td>2136.776638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2162</td>\n",
       "      <td>822</td>\n",
       "      <td>1083.140319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9232</td>\n",
       "      <td>3245</td>\n",
       "      <td>2677.365843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1523</td>\n",
       "      <td>4554</td>\n",
       "      <td>5062.970944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11622</td>\n",
       "      <td>3509</td>\n",
       "      <td>2610.483097</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2564 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Actual    Predicted\n",
       "6757     4219  2653.903881\n",
       "1074     3275  2580.370627\n",
       "7629     3223  3180.240174\n",
       "11338     463   660.692498\n",
       "8252     4390  3123.043382\n",
       "...       ...          ...\n",
       "1268     2176  2136.776638\n",
       "2162      822  1083.140319\n",
       "9232     3245  2677.365843\n",
       "1523     4554  5062.970944\n",
       "11622    3509  2610.483097\n",
       "\n",
       "[2564 rows x 2 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Actual versus Predicted\n",
    "de = pd.DataFrame({'Actual': y_test, 'Predicted':y_test_predict})\n",
    "de"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE of Train = 446679.4284589303\n",
      "MSE of Test 452693.57216826\n",
      "r2_score of Train  0.7581870362777205\n",
      "r2_score of Test  0.746174538788897\n",
      "MAE of Train  523.60264091487\n",
      "MAE of Test  523.7538122601278\n"
     ]
    }
   ],
   "source": [
    "#metrics\n",
    "from sklearn.metrics import mean_squared_error, r2_score,mean_absolute_error\n",
    "print(\"MSE of Train =\", mean_squared_error(y_train,y_train_predict))\n",
    "print('MSE of Test',mean_squared_error(y_test,y_test_predict) )\n",
    "print('r2_score of Train ', r2_score(y_train,y_train_predict))\n",
    "print('r2_score of Test ',r2_score(y_test,y_test_predict))\n",
    "print('MAE of Train ',mean_absolute_error(y_train,y_train_predict) )\n",
    "print('MAE of Test ',mean_absolute_error(y_test,y_test_predict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
